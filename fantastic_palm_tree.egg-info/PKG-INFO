Metadata-Version: 2.4
Name: fantastic-palm-tree
Version: 0.1.0
Summary: Advanced backtesting framework with modular strategy components
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: pydantic>=1.8.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pytz>=2021.1
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: requests>=2.25.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: types-python-dateutil; extra == "dev"
Requires-Dist: types-pytz; extra == "dev"
Requires-Dist: types-requests; extra == "dev"

# Fantastic Palm Tree - Advanced Backtesting Framework

A comprehensive backtesting framework with advanced metrics, parameter sweeping, kill-switch mechanisms, and Schwab broker integration.

## Features

- **Modular Strategy Framework**: Clean separation of concerns with dedicated modules for strategy, risk management, indicators, and configuration
- **Typed Dataclasses**: Strongly-typed result objects for better type safety and development experience  
- **Trailing Stop Engine**: Extensible trailing stop system with ATR-based logic and dynamic adjustment capabilities
- **Advanced Configuration**: Comprehensive configuration system with validation and sensible defaults
- **Performance Metrics**: Extensive performance and risk metrics calculation
- **Parameter Sweep**: Parallel parameter optimization and testing
- **Kill-Switch**: Risk management and emergency stop mechanisms
- **Schwab Broker**: Integration scaffold for Charles Schwab API

## Quick Start

```python
from fantastic_palm_tree.strategy.enhanced import EnhancedStrategy
from fantastic_palm_tree.config import StrategyConfig
from fantastic_palm_tree.results import BarProcessResult

# Configure strategy with modular settings
config = StrategyConfig(
    atr_period=14,
    exits={
        "trailing": {
            "enabled": True,
            "type": "atr", 
            "use_dynamic_atr": True,
            "dynamic_atr_min_samples": 5
        }
    }
)

# Create strategy instance
strategy = EnhancedStrategy(config)
strategy.set_fees(commission_rate=0.001, slippage=0.01)

# Process market data
result: BarProcessResult = strategy.process_bar(
    high=102.5, low=99.8, close=101.2, prev_close=100.0
)

# Access typed results
print(f"ATR: {result.atr}")
print(f"Stop Hit: {result.stop_hit}")
if result.exit_result:
    print(f"PnL: {result.exit_result.pnl}")
    print(f"R-Multiple: {result.exit_result.r_multiple}")
```

## Installation

```bash
pip install -e .
```

## Development

```bash
pip install -e ".[dev]"
pytest
