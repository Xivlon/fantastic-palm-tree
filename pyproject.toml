[project]
name = "fantastic-palm-tree"
version = "0.1.0"
description = "Advanced backtesting framework for algorithmic trading strategies"
authors = [
    {name = "Fantastic Palm Tree Contributors", email = "maintainers@example.com"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.9"
keywords = ["backtesting", "trading", "finance", "algorithmic-trading", "quantitative-finance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry", 
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.21.0", 
    "matplotlib>=3.5.0",
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.0",
    "pytz>=2022.1",
]

[project.optional-dependencies]
# Web API and server features
api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "aiohttp>=3.8.0",
]
# HTTP requests and external data
data = [
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
]
# Testing and development  
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
# Development tools
dev = [
    "black>=23.0.0",
    "isort>=5.12.0", 
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
# All optional dependencies
all = [
    "fantastic-palm-tree[api,data,test,dev]",
]

[project.urls]
"Homepage" = "https://github.com/Xivlon/fantastic-palm-tree"
"Documentation" = "https://github.com/Xivlon/fantastic-palm-tree#readme"
"Repository" = "https://github.com/Xivlon/fantastic-palm-tree"
"Issues" = "https://github.com/Xivlon/fantastic-palm-tree/issues"
"Changelog" = "https://github.com/Xivlon/fantastic-palm-tree/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["fantastic_palm_tree"]

[tool.setuptools.package-data]
fantastic_palm_tree = ["py.typed"]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Tool configurations
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (handled by complexity tools)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/**/*.py" = ["S101"]  # use of assert

[tool.ruff.isort]
known-first-party = ["fantastic_palm_tree"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["fantastic_palm_tree"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # assert_used - acceptable in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]