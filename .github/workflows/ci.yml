name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"
        pip install ruff

    - name: Install Node.js dependencies
      run: npm ci

    - name: Security scan with pip-audit
      run: |
        pip install pip-audit
        pip-audit --desc --format=json --output=security-report.json || true
        
    - name: Lint with ruff  
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        ruff check . --output-format=github --select=E9,F63,F7,F82 --target-version=py39
        # Check all other issues but don't fail the build for existing code
        ruff check . --output-format=github --target-version=py39 --exit-zero

    - name: Lint frontend with ESLint
      run: npm run lint

    - name: Type check with mypy
      run: |
        # Enable mypy for core modules only to start
        mypy fantastic_palm_tree/ --ignore-missing-imports --check-untyped-defs
      continue-on-error: true

    - name: Type check frontend with TypeScript
      run: npm run type-check

    - name: Test with pytest
      run: |
        pytest --cov=fantastic_palm_tree --cov-report=xml --cov-report=term-missing --cov-fail-under=60

    - name: Build frontend
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test Docker images
      run: |
        # Build development image
        docker buildx build --target development --tag fantastic-palm-tree:dev --load .
        
        # Build production image
        docker buildx build --target production --tag fantastic-palm-tree:prod --load .
        
        # Test images
        docker run --rm fantastic-palm-tree:dev python -c "import fantastic_palm_tree; print('Dev image: OK')"
        docker run --rm fantastic-palm-tree:prod python -c "import fantastic_palm_tree; print('Prod image: OK')"

  complexity-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: Install complexity tools
      run: |
        pip install radon xenon
        
    - name: Analyze complexity
      run: |
        radon cc . --min=B --show-complexity
        radon mi . --min=B
        xenon . --max-absolute=B --max-modules=B --max-average=A
      continue-on-error: true
